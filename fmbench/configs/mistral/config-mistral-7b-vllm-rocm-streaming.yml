# config file for a rest endpoint supported on fmbench - 
# this file uses a llama-3-70b-instruct deployed on ec2 on an inf2 instance
general:
  name: "mistral-7b-vllm-rocm"      
  model_name: "mistral-7b-instruct"
  
# AWS and SageMaker settings
aws:
  # AWS region, this parameter is templatized, no need to change
  region: {region}
  # SageMaker execution role used to run FMBench, this parameter is templatized, no need to change
  sagemaker_execution_role: {role_arn}
  # S3 bucket to which metrics, plots and reports would be written to
  bucket: {write_bucket} ## add the name of your desired bucket

# directory paths in the write bucket, no need to change these
dir_paths:
  data_prefix: data
  prompts_prefix: prompts
  all_prompts_file: all_prompts.csv
  metrics_dir: metrics
  models_dir: models
  metadata_dir: metadata

# S3 information for reading datasets, scripts and tokenizer
s3_read_data:
  # read bucket name, templatized, if left unchanged will default to sagemaker-fmbench-read-region-account_id
  read_bucket: {read_bucket}
  scripts_prefix: scripts ## add your own scripts in case you are using anything that is not on jumpstart
  
  # S3 prefix in the read bucket where deployment and inference scripts should be placed
  scripts_prefix: scripts
    
  # deployment and inference script files to be downloaded are placed in this list
  # only needed if you are creating a new deployment script or inference script
  # your HuggingFace token does need to be in this list and should be called "hf_token.txt"
  script_files:
  - hf_token.txt

  # configuration files (like this one) are placed in this prefix
  configs_prefix: configs

  # list of configuration files to download, for now only pricing.yml needs to be downloaded
  config_files:
  - pricing.yml

  # S3 prefix for the dataset files
  source_data_prefix: source_data
  # list of dataset files, the list below is from the LongBench dataset https://huggingface.co/datasets/THUDM/LongBench
  source_data_files:
  - 2wikimqa_e.jsonl
  - 2wikimqa.jsonl
  - hotpotqa_e.jsonl
  - hotpotqa.jsonl
  - narrativeqa.jsonl
  - triviaqa_e.jsonl
  - triviaqa.jsonl
  tokenizer_prefix: mistral_tokenizer ## add the tokenizer.json and config.json from your specific tokenizer type
  prompt_template_dir: prompt_template
  prompt_template_file: prompt_template_mistral.txt ## add your desired prompt template type
# steps to run, usually all of these would be
# set to yes so nothing needs to change here
# you could, however, bypass some steps for example
# set the 2_deploy_model.ipynb to no if you are re-running
# the same config file and the model is already deployed
run_steps:
  0_setup.ipynb: yes
  1_generate_data.ipynb: yes
  2_deploy_model.ipynb: yes
  3_run_inference.ipynb: yes
  4_model_metric_analysis.ipynb: yes
  5_cleanup.ipynb: no
  #0_setup.ipynb: yes
  #1_generate_data.ipynb: yes
  #2_deploy_model.ipynb: no
  #3_run_inference.ipynb: yes
  #4_get_evaluations.ipynb: yes
  #5_model_metric_analysis.ipynb: yes
  #6_cleanup.ipynb: no


datasets:
  prompt_template_keys:
  - input
  - context
  filters:
  - language: en    
    min_length_in_tokens: 1
    max_length_in_tokens: 500
    payload_file: payload_en_1-500.jsonl
  - language: en
    min_length_in_tokens: 500
    max_length_in_tokens: 1000
    payload_file: payload_en_500-1000.jsonl
  - language: en
    min_length_in_tokens: 1000
    max_length_in_tokens: 2000
    payload_file: payload_en_1000-2000.jsonl
  - language: en
    min_length_in_tokens: 2000
    max_length_in_tokens: 3000
    payload_file: payload_en_2000-3000.jsonl
  - language: en
    min_length_in_tokens: 3000
    max_length_in_tokens: 4000
    payload_file: payload_en_3000-4000.jsonl
  - language: en
    min_length_in_tokens: 305
    max_length_in_tokens: 3997
    payload_file: payload_en_305-3997.jsonl



# While the tests would run on all the datasets
# configured in the experiment entries below but 
# the price:performance analysis is only done for 1
# dataset which is listed below as the dataset_of_interest
metrics:
  dataset_of_interest: en_2000-3000
  
# all pricing information is in the pricing.yml file
# this file is provided in the repo. You can add entries
# to this file for new instance types and new Bedrock models
pricing: pricing.yml 

# inference parameters, these are added to the payload
# for each inference request. The list here is not static
# any parameter supported by the inference container can be
# added to the list. Put the sagemaker parameters in the sagemaker
# section, bedrock parameters in the bedrock section (not shown here).
# Use the section name (sagemaker in this example) in the inference_spec.parameter_set
# section under experiments.
inference_parameters: 
  vllm-rocm:
    temperature: 0.1
    max_tokens: 100
    top_p: 0.92
    caching: False

# Configuration for experiments to be run. The experiments section is an array
# so more than one experiments can be added, these could belong to the same model
# but different instance types, or different models, or even different hosting
# options.
experiments:
  - name: "Mistral-7B-v0.1-FP8-KV"
    # AWS region, this parameter is templatized, no need to change
    region: {region}
    # this can be changed to the IP address of your specific EC2 instance where the model is hosted
    ep_name: 'http://localhost:8000/v1' 
    instance_type: "vllm-rocm-mi300x"
    model_id: 'amd/Mistral-7B-v0.1-FP8-KV'
    image_uri: 763104351884.dkr.ecr.{region}.amazonaws.com/djl-inference:0.29.0-lmi11.0.0-cu124
    deploy: no #setting to yes to run deployment script for ec2
    stream: True
    #stream: False
    instance_count: 
    deployment_script: ec2_deploy.py
    # FMBench comes packaged witsh multiple inference scripts, such as scripts for SageMaker
    # and Bedrock. You can also add your own. This is an example for a rest DJL predictor
    # for a llama3-70b-instruct deployed on ec2
    inference_script: vllm_predictor.py
    #inference_script: custom_rest_predictor_vllm_openai.py
    # This section defines the settings for Amazon EC2 instances
    ec2:
      #This setting specifies the timeout (in seconds) for loading the model. 
      model_loading_timeout: 2400
    inference_spec:
      model_id: 'amd/Mistral-7B-v0.1-FP8-KV'
      split_input_and_parameters: no
      # this should match one of the sections in the inference_parameters section above
      parameter_set: vllm-rocm-mi300x
      # how many copies of the model, 1, 2,..max
      # set to 1 in the code if not configured, setting to max means that 
      # the code will determine how many copies can be loaded based on TP and 
      # number of GPU/Neuron devices available
      stream: True
      start_token:
      stop_token: "<|eot_id|>"
      #stream: False

    # runs are done for each combination of payload file and concurrency level
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    # concurrency level refers to number of requests sent in parallel to an endpoint
    # the next set of requests is sent once responses for all concurrent requests have
    # been received.
    concurrency_levels:
    - 1
    - 2
    - 4
    # Environment variables to be passed to the container
    # this is not a fixed list, you can add more parameters as applicable.
    env:

report:
  latency_budget: 5
  cost_per_10k_txn_budget: 20
  error_rate_budget: 0
  per_inference_request_file: per_inference_request_results.csv
  all_metrics_file: all_metrics.csv
  txn_count_for_showing_cost: 10000
  v_shift_w_single_instance: 0.025
  v_shift_w_gt_one_instance: 0.025  
